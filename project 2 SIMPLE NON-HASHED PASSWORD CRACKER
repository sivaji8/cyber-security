import itertools
import string
import re
import tkinter as tk
from tkinter import filedialog, messagebox

# Brute Force Attack Function
def brute_force_crack(target, max_length=8):
    chars = string.ascii_letters + string.digits + string.punctuation
    for length in range(1, max_length + 1):
        for attempt in itertools.product(chars, repeat=length):
            if ''.join(attempt) == target:
                return ''.join(attempt)
    return None

# Dictionary Attack Function
def dictionary_attack(target, dictionary_file='common_passwords.txt'):
    with open(dictionary_file, 'r') as file:
        for line in file:
            password = line.strip()
            if password == target:
                return password
    return None

# Pattern Matching Attack Function
def pattern_matching_crack(target, patterns):
    for pattern in patterns:
        regex = re.compile(pattern)
        match = regex.match(target)
        if match:
            return match.group()
    return None

# Password Cracker Application Class
class PasswordCrackerApp:
    def __init__(self, master):
        self.master = master
        self.master.title("Simple Non-Hashed Password Cracker")
        self.create_widgets()

    def create_widgets(self):
        self.upload_button = tk.Button(self.master, text="Upload Password File", command=self.upload_file)
        self.upload_button.pack()
        
        self.attack_type = tk.StringVar(value="brute_force")
        self.brute_force_radio = tk.Radiobutton(self.master, text="Brute Force", variable=self.attack_type, value="brute_force")
        self.brute_force_radio.pack()
        self.dictionary_radio = tk.Radiobutton(self.master, text="Dictionary Attack", variable=self.attack_type, value="dictionary")
        self.dictionary_radio.pack()
        self.pattern_radio = tk.Radiobutton(self.master, text="Pattern Matching", variable=self.attack_type, value="pattern")
        self.pattern_radio.pack()
        
        self.run_button = tk.Button(self.master, text="Run Attack", command=self.run_attack)
        self.run_button.pack()
        
        self.result_text = tk.Text(self.master, height=10)
        self.result_text.pack()

    def upload_file(self):
        self.filepath = filedialog.askopenfilename()
        messagebox.showinfo("File Selected", f"Selected file: {self.filepath}")

    def run_attack(self):
        if not hasattr(self, 'filepath'):
            messagebox.showerror("Error", "No file selected")
            return

        with open(self.filepath, 'r') as file:
            passwords = [line.strip() for line in file]

        results = []
        if self.attack_type.get() == "brute_force":
            for password in passwords:
                cracked = brute_force_crack(password)
                results.append(f"{password} -> {cracked}")
        elif self.attack_type.get() == "dictionary":
            for password in passwords:
                cracked = dictionary_attack(password)
                results.append(f"{password} -> {cracked}")
        elif self.attack_type.get() == "pattern":
            patterns = ["pattern1", "pattern2"]  # Define your patterns here
            for password in passwords:
                cracked = pattern_matching_crack(password, patterns)
                results.append(f"{password} -> {cracked}")

        self.result_text.delete(1.0, tk.END)
        for result in results:
            self.result_text.insert(tk.END, f"{result}\n")

if __name__ == "__main__":
    root = tk.Tk()
    app = PasswordCrackerApp(root)
    root.mainloop()
